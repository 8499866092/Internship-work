# -*- coding: utf-8 -*-
"""VV_VH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14oq1t-K7uzK4uDVuewcoprM9t4mm1NrR
"""

pip install geopandas rasterio openpyxl

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# STEP 1: Import libraries
import os
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import pandas as pd
import numpy as np
from datetime import datetime

# STEP 3: User Inputs
input_folder = '/content/drive/MyDrive/NRSC_INTERNSHIP_DATA/Sentinel_1_Nagpur/Nagpur_vh/'
output_folder = input_folder + 'clipped_AOIs/'
os.makedirs(output_folder, exist_ok=True)

aoi_path = '/content/drive/MyDrive/NRSC_INTERNSHIP_DATA/Sentinel_2_Nagpur/NAGPUR_AOI/NAGPUR_AOI.shp'  # update path as needed
output_excel_path = input_folder + 'NAGPUR_VH_AOI_summary.xlsx'

# STEP 4: Load AOI shapefile
aoi = gpd.read_file(aoi_path)
aoi_geom = [feature["geometry"] for feature in aoi.__geo_interface__["features"]]  # list of geometries

# STEP 5: Summary list
summary = []

# STEP 6: Process each TIFF
for filename in os.listdir(input_folder):
    if filename.endswith('.tif'):
        file_path = os.path.join(input_folder, filename)

        try:
            with rasterio.open(file_path) as src:
                # Clip the raster using AOI geometry (no CRS check needed)
                clipped_image, clipped_transform = mask(src, aoi_geom, crop=True)
                clipped_data = clipped_image[0]  # single band

                # Remove no-data values
                valid_data = clipped_data[clipped_data != src.nodata]

                if valid_data.size > 0:
                    mean_val = float(np.mean(valid_data))
                    min_val = float(np.min(valid_data))
                    max_val = float(np.max(valid_data))
                else:
                    mean_val, min_val, max_val = None, None, None

                # Save clipped raster
                clipped_meta = src.meta.copy()
                clipped_meta.update({
                    "height": clipped_data.shape[0],
                    "width": clipped_data.shape[1],
                    "transform": clipped_transform
                })

                output_tif_path = os.path.join(output_folder, f'clipped_{filename}')
                with rasterio.open(output_tif_path, 'w', **clipped_meta) as dst:
                    dst.write(clipped_image)

                # Try extracting date from filename
                try:
                    date_str = ''.join(filter(str.isdigit, filename))
                    date = datetime.strptime(date_str[:8], '%Y%m%d').date()
                except:
                    date = None

                # Save to summary
                summary.append({
                    'FileName': filename,
                    'Date': date,
                    'Mean_VH': mean_val,
                    'Min_VH': min_val,
                    'Max_VH': max_val,
                    'Clipped_File': output_tif_path
                })

                print(f"‚úÖ Processed {filename} ‚Üí Mean: {mean_val}, Min: {min_val}, Max: {max_val}")

        except Exception as e:
            print(f"‚ùå Failed to process {filename}: {e}")

# STEP 7: Save summary to Excel
df = pd.DataFrame(summary)
df.to_excel(output_excel_path, index=False)
print("\n‚úÖ All done!")
print("üìù Excel summary saved to:", output_excel_path)