# -*- coding: utf-8 -*-
"""Normalized_RVI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x47bwZnY-l9ssRT5YjE04doARSCS4xYx
"""

# ============================================
# SECTION 1: Setup
# ============================================
!pip install earthengine-api --quiet
import ee
ee.Authenticate()
ee.Initialize(project="ee-24ag62r16")

# ============================================
# SECTION 2: Define AOI from Point (Nagpur)
# ============================================
point = ee.Geometry.Point([88.428009, 22.758522])
aoi = point.buffer(10000).bounds()  # 10km buffer → 20km x 20km AOI box

# ============================================
# SECTION 3: Load Agriculture Mask (your asset)
# ============================================
agri_mask = ee.Image("projects/ee-24ag62r16/assets/Barrackpore_Agrimask")  # binary mask: 1=agriculture

# ============================================
# SECTION 4: Define Refined Lee Filter
# ============================================
def refined_lee(img):
    weights3 = ee.List.repeat(ee.List.repeat(1, 3), 3)
    kernel3 = ee.Kernel.fixed(3, 3, weights3, 1, 1, False)
    mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3)
    var3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3)
    sample_weights = ee.List([
        [0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0],
        [0,1,0,1,0,1,0],[0,0,0,0,0,0,0],[0,1,0,1,0,1,0],[0,0,0,0,0,0,0]
    ])
    sample_kernel = ee.Kernel.fixed(7, 7, sample_weights, 3, 3, False)
    sample_mean = mean3.neighborhoodToBands(sample_kernel)
    sample_var = var3.neighborhoodToBands(sample_kernel)
    gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs() \
        .addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs()) \
        .addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs()) \
        .addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs())
    max_gradient = gradients.reduce(ee.Reducer.max())
    gradmask = gradients.eq(max_gradient)
    directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(
        sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1)
    directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(
        sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2))
    directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(
        sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3))
    directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(
        sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4))
    directions = directions.updateMask(gradmask).reduce(ee.Reducer.sum())
    sample_stats = sample_var.divide(sample_mean.multiply(sample_mean))
    sigmaV = sample_stats.toArray().arraySort().arraySlice(0, 0, 5).arrayReduce(ee.Reducer.mean(), [0])
    rect_kernel = ee.Kernel.rectangle(3, 3, "pixels")
    dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel)
    dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel)
    varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0))
    b = varX.divide(dir_var)
    result = dir_mean.add(b.multiply(img.subtract(dir_mean)))
    return result.arrayFlatten([['filtered']])

# ============================================
# SECTION 5: Compute RVI for a Given Date
# ============================================
def compute_rvi(date_str):
    target_date = ee.Date(date_str)
    img = ee.ImageCollection("COPERNICUS/S1_GRD") \
        .filterBounds(aoi) \
        .filterDate(target_date.advance(-5, 'day'), target_date.advance(5, 'day')) \
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV')) \
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH')) \
        .filter(ee.Filter.eq('instrumentMode', 'IW')) \
        .sort('system:time_start') \
        .first()

    img = ee.Image(img)  # ensure casting to Image
    vv = refined_lee(img.select('VV')).expression('10 ** (b("filtered") / 10)')
    vh = refined_lee(img.select('VH')).expression('10 ** (b("filtered") / 10)')
    rvi = vh.multiply(4).divide(vv.add(vh).add(1e-6)).rename('RVI')
    return rvi

# ============================================
# SECTION 6: Get RVI min/max from long period
# ============================================
def compute_rvi_for_img(img):
    img = ee.Image(img)
    vv = refined_lee(img.select('VV')).expression('10 ** (b("filtered") / 10)')
    vh = refined_lee(img.select('VH')).expression('10 ** (b("filtered") / 10)')
    rvi = vh.multiply(4).divide(vv.add(vh).add(1e-6)).rename('RVI')
    return rvi.set('system:time_start', img.get('system:time_start'))

s1_all = ee.ImageCollection("COPERNICUS/S1_GRD") \
    .filterBounds(aoi) \
    .filterDate('2022-04-06', '2023-08-29') \
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV')) \
    .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH')) \
    .filter(ee.Filter.eq('instrumentMode', 'IW')) \
    .map(compute_rvi_for_img)

rvi_min = s1_all.reduce(ee.Reducer.min()).rename("RVI_min")
rvi_max = s1_all.reduce(ee.Reducer.max()).rename("RVI_max")

# ============================================
# SECTION 7: Export Normalized RVI
# ============================================
def export_rvi(date_str):
    rvi = compute_rvi(date_str)
    rvi_norm = rvi.subtract(rvi_min).divide(rvi_max.subtract(rvi_min).add(1e-6)).rename('RVI_norm')
    agri_rvi = rvi_norm.updateMask(agri_mask).clip(aoi)

    task = ee.batch.Export.image.toDrive(
        image=agri_rvi,
        description=f"RVI_{date_str}_norm",
        folder="Sentinel_Barrackpore_features",
        fileNamePrefix=f"RVI_{date_str}_norm_epsg4326_20m",
        region=aoi,
        scale=20,
        crs="EPSG:4326",
        maxPixels=1e13
    )
    task.start()

# ✅ Export for your selected dates
train_dates = ['2022-04-06','2022-04-12','2022-04-18','2022-04-30','2022-05-12','2022-05-18','2022-06-11','2022-06-17','2022-07-23','2022-07-29','2022-08-16','2022-08-22','2022-10-21','2022-10-27','2022-11-02','2022-11-08','2022-11-14','2022-11-20','2022-11-26','2022-12-02','2022-12-08','2022-12-14','2022-12-26','2023-01-07','2023-01-13','2023-01-25','2023-01-31','2023-02-06','2023-02-18','2023-02-24','2023-03-08','2023-03-26','2023-04-10','2023-04-13','2023-04-19','2023-04-25','2023-05-01','2023-05-19','2023-05-25','2023-05-31','2023-06-06','2023-08-23','2023-08-29'
'2022-05-06','2022-05-30','2022-06-05','2022-06-23','2022-06-29','2022-07-05','2022-07-11','2022-07-17','2022-08-04','2022-08-10','2022-08-28','2022-09-03','2022-09-15','2022-09-21','2022-09-27','2022-10-03','2022-10-09','2023-01-01','2023-01-19','2023-03-14','2023-05-07','2023-05-13','2023-06-24','2023-06-30','2023-07-06','2023-07-12','2023-07-18','2023-07-24','2023-07-30','2023-08-05','2023-08-11','2023-08-17']
for date in train_dates:
    export_rvi(date)
# ============================================
# SECTION 10: Export AOI as Shapefile in EPSG:4326
# ============================================
# Reproject AOI to EPSG:4326
aoi_reprojected = aoi.transform('EPSG:4326')

# Create FeatureCollection from AOI
aoi_fc = ee.FeatureCollection([ee.Feature(aoi_reprojected)])

# Export AOI as Shapefile
ee.batch.Export.table.toDrive(
    collection=aoi_fc,
    description="Export_AOI_Shape",
    folder="Sentinel_Nagpur_features",
    fileNamePrefix="AOI_Nagpur",
    fileFormat='SHP'
).start()

# ============================================
# SECTION 8: Export Synthetic RVI Min/Max
# ============================================
ee.batch.Export.image.toDrive(
    image=rvi_min.updateMask(agri_mask).clip(aoi),
    description="Export_RVI_min",
    folder="Sentinel_Barrackpore_features",
    fileNamePrefix="Synthetic_RVI_min_epsg4326_20m",
    region=aoi,
    scale=20,
    crs="EPSG:4326",
    maxPixels=1e13
).start()

ee.batch.Export.image.toDrive(
    image=rvi_max.updateMask(agri_mask).clip(aoi),
    description="Export_RVI_max",
    folder="Sentinel_Barrackpore_features",
    fileNamePrefix="Synthetic_RVI_max_epsg4326_20m",
    region=aoi,
    scale=20,
    crs="EPSG:4326",
    maxPixels=1e13
).start()

# ============================================
# SECTION 9: Export Clipped Agriculture Mask
# ============================================
ee.batch.Export.image.toDrive(
    image=agri_mask.clip(aoi),
    description="Export_agri_mask",
    folder="Sentinel_Barrackpore_features",
    fileNamePrefix="Agri_Mask_epsg4326_20m",
    region=aoi,
    scale=20,
    crs="EPSG:4326",
    maxPixels=1e13
).start()